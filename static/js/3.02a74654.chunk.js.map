{"version":3,"sources":["shared/utility.js","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","display","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","validation","valid","touched","street","zipCode","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedOrderForm","JSON","parse","stringify","target","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","valueType","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","withRouter","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchased","path","match","component","input","inputElement","validationError","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.02a74654.chunk.js","sourcesContent":["export const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    return isValid;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from 'react';\n\nimport classes from './CheckoutSummary.module.css';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it taste well!</h1>\n            <div style={{width: '100%', margin: 'auto', display: 'flex'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;\n","import React, {Component} from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport {connect} from 'react-redux';\nimport axios from '../../../axios-orders';\n\nimport classes from './ContactData.module.css';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/order';\nimport {checkValidity} from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Zip Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            },\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = JSON.parse(JSON.stringify(this.state.orderForm));\n\n        updatedOrderForm[inputIdentifier].value = event.target.value;\n        updatedOrderForm[inputIdentifier].valid = checkValidity(updatedOrderForm[inputIdentifier].value, updatedOrderForm[inputIdentifier].validation);\n        updatedOrderForm[inputIdentifier].touched = true;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid\n        });\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType} \n                        elementConfig={formElement.config.elementConfig} \n                        value={formElement.config.value}\n                        valueType={formElement.config.elementConfig.placeholder}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                    />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(withRouter(ContactData), axios));\n","import React, {Component} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CheckoutSmmary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />\n        \n        if (this.props.ings && !this.props.purchased) {\n            summary = (\n                <div>\n                    <CheckoutSmmary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} \n                    />\n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                        component={ContactData} \n                    />\n                </div>\n            );\n        }\n\n        return summary;\n    }\n}\n\nconst mapStateToProps =  state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    let validationError = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n        validationError = <p>Please enter a valid {props.valueType}!</p>;\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            break;\n        case ('select'):\n                inputElement = <select \n                                    className={inputClasses.join(' ')}\n                                    value={props.value}\n                                    onChange={props.changed}\n                                >\n                                    {props.elementConfig.options.map(option => (\n                                        <option key={option.value} value={option.value}>\n                                            {option.displayValue}\n                                        </option>\n                                    ))}\n                                </select>;\n                break;\n        default:\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n    }\n\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n}\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}