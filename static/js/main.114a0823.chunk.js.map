{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.module.css","components/Navigation/SideDrawer/SideDrawer.module.css","components/Burger/BuildControls/BuildControl/BuildControl.module.css","components/UI/Input/Input.module.css","components/Navigation/Toolbar/Toolbar.module.css","components/Navigation/NavigationItems/NavigationItem/NavigationItem.module.css","components/Burger/BuildControls/BuildControls.module.css","components/UI/Button/Button.module.css","hoc/Layout/Layout.module.css","components/Logo/Logo.module.css","assets/images/burger-logo.png","components/Navigation/NavigationItems/NavigationItems.module.css","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.module.css","components/UI/Backdrop/Backdrop.module.css","components/Burger/Burger.module.css","components/UI/Modal/Modal.module.css","components/UI/Spinner/Spinner.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/Order.module.css","containers/Auth/Auth.module.css","hoc/Auxiliary/Auxiliary.js","components/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/UI/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","hoc/Layout/Layout.js","axios-orders.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/UI/Modal/Modal.js","components/UI/Button/Button.js","components/Burger/OrderSummary/OrderSummary.js","components/UI/Spinner/Spinner.js","hoc/withErrorHandler/withErrorHandler.js","store/actions/auth.js","store/actions/actionTypes.js","containers/BurgerBuilder/BurgerBuilder.js","store/actions/burgerBuilder.js","store/actions/order.js","components/Order/CheckoutSummary/CheckoutSummary.js","components/UI/Input/Input.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/Order/Order.js","containers/Orders/Orders.js","containers/Auth/Auth.js","containers/Auth/Logout/Logout.js","App.js","serviceWorker.js","store/reducers/burgerBuilder.js","store/reducers/order.js","store/reducers/auth.js","index.js"],"names":["module","exports","aux","props","children","logo","className","classes","Logo","src","burgerLogo","alt","navigationItem","NavigationItem","to","link","activeClassName","active","exact","navigationItems","isAuthenticated","Fragment","NavigationItems","drawerToggle","DrawerToggle","onClick","clicked","toolbar","Toolbar","drawerToggleClicked","DesktopOnly","isAuth","backdrop","show","Backdrop","sideDrawer","attachedClasses","SideDrawer","Close","open","Open","closed","join","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToggleHandler","prevState","this","Content","Component","connect","auth","token","instance","axios","create","baseURL","BurgerIngredient","ingredient","type","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","burger","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","index","key","reduce","arr","el","concat","length","Burger","buildControl","BuildControl","Label","label","Less","removed","disabled","More","added","controls","buildControls","BuildControls","price","toFixed","ctrl","ingredientAdded","ingredientRemoved","OrderButton","purchasable","ordered","React","memo","modalClosed","Modal","style","transform","opacity","button","Button","btnType","orderSummary","ingredientSummary","textTransform","purchaseCancelled","purchaseContinued","spinner","Loader","withErrorHandler","WrappedComponent","error","errorConfirmedHandler","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","eject","message","authSuccess","userId","idToken","logout","localStorage","removeItem","checkAuthTimeout","exporationTime","dispatch","setTimeout","email","password","isSignup","authData","returnSecureToken","url","post","then","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","console","log","authFail","setAuthRedirectPath","path","BurgerBuilder","purchasing","isPurchasable","ings","igkey","sum","purchaseHandler","onSetAuthRedirectPath","history","push","purchaseCancelHandler","purchaseContinuedHandler","onInitPurchase","onInitIngredients","disableInfo","textAlign","Spinner","onIngredientAdded","onIngredientRemoved","OrderSummary","burgerBuilder","totalPrice","ingName","ingredientName","get","actions","checkoutSummary","CheckoutSummary","width","margin","display","checkoutCancelled","checkoutContinued","input","inputElement","validationError","inputClasses","InputElement","invalid","shouldValidate","touched","Invalid","valueType","elementType","elementConfig","value","onChange","changed","options","option","displayValue","Input","ContactData","orderForm","name","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","test","formElementsArray","id","config","form","onSubmit","formElement","loading","orderId","purchaseBurgerSuccess","purchaseBurgerFail","withRouter","Checkout","checkoutCancelledHandler","goBack","checkoutContinuedHandler","replace","summary","purchased","match","component","amount","ingredientOutput","ig","border","padding","Order","Number","parseFloat","Orders","onFetchOrders","orders","queryParams","fetchedOrders","err","Auth","controlName","updatedControls","submitHandler","onAuth","switchAuthModeHandler","buildingBurger","authRedirectPath","errorMessage","authRedirect","building","Logout","onLogout","App","onTryAutoSignup","routes","getItem","Boolean","window","location","hostname","INGREDIENT_PRICES","salad","cheese","bacon","meat","initialState","reducer","action","updatedState","JSON","parse","stringify","addIngredient","removeIngredient","setIngredient","fetchIngredientFail","purchaseBurgerInit","purchaseBurgerStart","fetchOrdersStart","fetchOrdersSuccess","fetchOrdersFail","newOrder","authStart","authLogout","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","burgerBuilderReducer","orderReducer","authReducer","store","createStore","applyMiddleware","thunk","app","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.114a0823.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient_BreadBottom__2US69\",\"BreadTop\":\"BurgerIngredient_BreadTop__3Y4-R\",\"Seeds1\":\"BurgerIngredient_Seeds1__J6vUJ\",\"Seeds2\":\"BurgerIngredient_Seeds2__2Ylex\",\"Meat\":\"BurgerIngredient_Meat__3flwI\",\"Cheese\":\"BurgerIngredient_Cheese__3rOTJ\",\"Salad\":\"BurgerIngredient_Salad__KLnhy\",\"Bacon\":\"BurgerIngredient_Bacon__1KK6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer_SideDrawer__3kXLK\",\"Open\":\"SideDrawer_Open__1tCv1\",\"Close\":\"SideDrawer_Close__9j7x-\",\"Logo\":\"SideDrawer_Logo__3voUv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControl\":\"BuildControl_BuildControl__O8649\",\"Label\":\"BuildControl_Label__TQkTk\",\"Less\":\"BuildControl_Less__3Ttg8\",\"More\":\"BuildControl_More__1MY7B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__ApScI\",\"Logo\":\"Toolbar_Logo__3Lk47\",\"DesktopOnly\":\"Toolbar_DesktopOnly__LuPaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__2SpXc\",\"active\":\"NavigationItem_active__2v2td\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControls\":\"BuildControls_BuildControls__1YmbS\",\"OrderButton\":\"BuildControls_OrderButton___M-Du\",\"enable\":\"BuildControls_enable__9xLsD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3gFiX\",\"Success\":\"Button_Success__2Rka1\",\"Danger\":\"Button_Danger__2ogZq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__3H3X8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__1N0xH\"};","module.exports = __webpack_public_path__ + \"static/media/burger-logo.b8503d26.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__1fnFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle_DrawerToggle__m405X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3j6VK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger_Burger__10T8F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1-5dN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1twK-\",\"load8\":\"Spinner_load8__36vjM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3kYZJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","const aux = (props) => props.children;\n\nexport default aux;\n","import React from 'react';\n\nimport classes from './Logo.module.css';\nimport burgerLogo from '../../assets/images/burger-logo.png';\n\nconst logo = (props) => (\n    <div className={classes.Logo}>\n        <img src={burgerLogo} alt=\"Burger Logo\" />\n    </div>\n);\n\nexport default logo;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nimport classes from './NavigationItem.module.css';\n\nconst navigationItem = (props) => (\n    <li className={classes.NavigationItem}>\n        <NavLink \n            to={props.link} \n            activeClassName={classes.active}\n            exact={props.exact}\n        >\n            {props.children}\n        </NavLink>\n    </li>\n);\n\nexport default navigationItem;\n","import React from 'react';\n\nimport classes from './NavigationItems.module.css';\nimport NavigationItem from './NavigationItem/NavigationItem';\n\nconst navigationItems = (props) => {\n    let navigationItems = <NavigationItem link=\"/auth\">Authenticate</NavigationItem>;\n    if (props.isAuthenticated) {\n        navigationItems = (\n            <React.Fragment>\n                <NavigationItem link=\"/orders\">Orders</NavigationItem>\n                <NavigationItem link=\"/logout\">Logout</NavigationItem>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <ul className={classes.NavigationItems}>\n            <NavigationItem link=\"/\" exact>Burguer Builder</NavigationItem>\n            {navigationItems}\n        </ul>\n    );\n};\n\nexport default navigationItems;\n","import React from 'react';\nimport classes from './DrawerToggle.module.css';\n\nconst drawerToggle = (props) => (\n    <div className={classes.DrawerToggle} onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport default drawerToggle;\n","import React from 'react';\n\nimport classes from './Toolbar.module.css';\nimport Logo from '../../Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport ToggleButton from '../SideDrawer/DrawerToggle/DrawerToggle';\n\nconst toolbar = (props) => (\n    <header className={classes.Toolbar}>\n        <ToggleButton clicked={props.drawerToggleClicked} />\n        <div className={classes.Logo}>\n            <Logo />\n        </div>\n        <nav className={classes.DesktopOnly}>\n            <NavigationItems isAuthenticated={props.isAuth} />\n        </nav>\n    </header>\n);\n\nexport default toolbar;\n","import React from 'react';\n\nimport classes from './Backdrop.module.css';\n\nconst backdrop = (props) => (\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked}>{props.children}</div> : null\n);\n\nexport default backdrop;\n","import React from 'react';\n\nimport classes from './SideDrawer.module.css';\nimport Logo from '../../Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\nimport Backdrop from '../../UI/Backdrop/Backdrop';\n\nconst sideDrawer = (props) => {\n    let attachedClasses = [classes.SideDrawer, classes.Close];\n\n    if (props.open) {\n        attachedClasses = [classes.SideDrawer, classes.Open];\n    }\n\n    return (\n        <Aux>\n            <Backdrop show={props.open} clicked={props.closed}/>\n            <div className={attachedClasses.join(' ')}>\n                <div className={classes.Logo}>\n                    <Logo />\n                </div>\n                <nav onClick={props.closed}>\n                    <NavigationItems isAuthenticated={props.isAuth} />\n                </nav>\n            </div>\n        </Aux>\n    );\n}\n\nexport default sideDrawer;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Aux from '../Auxiliary/Auxiliary';\nimport classes from './Layout.module.css';\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\n\nclass Layout extends Component {\n    state = {\n        showSideDrawer: false,\n    }\n\n    sideDrawerClosedHandler = () => {\n        this.setState({showSideDrawer: false})\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState((prevState) => {\n            return {showSideDrawer: !prevState.showSideDrawer}\n        })\n    }\n\n    render() {\n        return(\n            <Aux>\n                <Toolbar \n                    isAuth={this.props.isAuthenticated}\n                    drawerToggleClicked={this.sideDrawerToggleHandler}\n                />\n                <SideDrawer \n                    isAuth={this.props.isAuthenticated}\n                    open={this.state.showSideDrawer} \n                    closed={this.sideDrawerClosedHandler}\n                />\n                <main className={classes.Content}>\n                    {this.props.children}\n                </main>\n            </Aux>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.auth.token !== null\n    };\n};\n\nexport default connect(mapStateToProps)(Layout);\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://the-burguer-builder-app.firebaseio.com/',\n});\n\nexport default instance;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './BurgerIngredient.module.css';\n\nclass BurgerIngredient extends Component {\n    render() {\n        let ingredient = null;\n\n        switch(this.props.type) {\n            case ('bread-bottom'):\n                ingredient = <div className={classes.BreadBottom}></div>\n                break;\n            \n            case ('bread-top'):\n                ingredient = (\n                    <div className={classes.BreadTop}>\n                        <div className={classes.Seeds1}></div>\n                        <div className={classes.Seeds2}></div>\n                    </div>\n                );\n                break;\n    \n            case ('meat'):\n                ingredient = <div className={classes.Meat}></div>\n                break;\n    \n            case ('cheese'):\n                    ingredient = <div className={classes.Cheese}></div>\n                    break;\n                    \n            case ('salad'):\n                    ingredient = <div className={classes.Salad}></div>\n                    break;\n    \n            case ('bacon'):\n                    ingredient = <div className={classes.Bacon}></div>\n                    break;\n            \n            default:\n                ingredient = null;\n        }\n    \n        return ingredient;\n    }\n}\n\nBurgerIngredient.propTypes = {\n    type: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredient;\n","import React from 'react';\n\nimport classes from './Burger.module.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst burger = (props) => {\n    let transformedIngredients = Object.keys(props.ingredients)\n        .map(igKey => {\n            return [...Array(props.ingredients[igKey])].map((_, index) => {\n                return <BurgerIngredient key={igKey + '_' + index} type={igKey} />;\n            });\n        })\n        .reduce((arr, el) => {\n            return arr.concat(el);\n        }, []);\n\n    if (transformedIngredients.length === 0) \n        transformedIngredients = <p>Please start adding ingredients!</p>;\n\n    return (\n        <div className={classes.Burger}>\n            <BurgerIngredient type=\"bread-top\" />\n            {transformedIngredients}\n            <BurgerIngredient type=\"bread-bottom\" />\n        </div>\n    );\n}\n\nexport default burger;\n","import React from 'react';\n\nimport classes from './BuildControl.module.css';\n\nconst buildControl = (props) => (\n    <div className={classes.BuildControl}>\n        <div className={classes.Label}>{props.label}</div>\n        <button \n            className={classes.Less}\n            onClick={props.removed}\n            disabled={props.disabled}\n        >\n            Less\n        </button>\n        <button \n            className={classes.More}\n            onClick={props.added}\n        >\n            More\n        </button>\n    </div>\n);\n\nexport default buildControl;\n","import React from 'react';\n\nimport classes from './BuildControls.module.css';\nimport BuildControl from './BuildControl/BuildControl';\n\nconst controls = [\n    {label: 'Salad', type: 'salad'},\n    {label: 'Cheese', type: 'cheese'},\n    {label: 'Bacon', type: 'bacon'},\n    {label: 'Meat', type: 'meat'},\n];\n\nconst buildControls = (props) => (\n    <div className={classes.BuildControls}>\n        <p>Current Price: <strong>{props.price.toFixed(2)}€</strong></p>\n        {controls.map(ctrl => {\n            return <BuildControl \n                key={ctrl.label} \n                label={ctrl.label} \n                added={() => props.ingredientAdded(ctrl.type)}\n                removed={() => props.ingredientRemoved(ctrl.type)}\n                disabled={props.disabled[ctrl.type]}/>;\n        })}\n        <button\n            className={classes.OrderButton}\n            disabled={!props.purchasable}\n            onClick={props.ordered}\n        >\n            {props.isAuth ? 'ORDER NOW' : 'SIGN UP TO ORDER'}\n        </button>\n    </div>\n);\n\nexport default buildControls;\n","import React from 'react';\n\nimport classes from './Modal.module.css';\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\nimport Backdrop from '../Backdrop/Backdrop';\n\nconst modal = (props) => (\n    <Aux>\n        <Backdrop show={props.show} clicked={props.modalClosed} />\n        <div \n            className={classes.Modal}\n            style={{\n                transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n                opacity: props.show ? '1' : '0'\n            }}\n        >\n            {props.children}\n        </div>\n    </Aux>\n);\n\nexport default React.memo(modal);\n","import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst button = (props) => (\n    <button \n        className={[classes.Button, classes[props.btnType]].join(' ')} \n        onClick={props.clicked}\n        disabled={props.disabled}\n    >\n        {props.children}\n    </button>\n);\n\nexport default button;\n","import React from 'react';\n\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\nimport Button from '../../UI/Button/Button';\n\nconst orderSummary = (props) => {\n    const ingredientSummary = Object.keys(props.ingredients)\n        .map(igKey => {\n            return (\n                <li key={igKey}>\n                    <span style={{textTransform: 'capitalize'}}>{igKey}</span>: {props.ingredients[igKey]}\n                </li>\n            );\n        });\n\n    return (\n        <Aux>\n            <h3>Your Order</h3>\n            <p>A delicious burger with the following ingredients:</p>\n            <ul>\n                {ingredientSummary}\n            </ul>\n            <p><strong>Total price: {props.price.toFixed(2)}€</strong></p>\n            <p>Continue to Checkout?</p>\n            <Button btnType=\"Danger\" clicked={props.purchaseCancelled}>CANCEL</Button>\n            <Button btnType=\"Success\" clicked={props.purchaseContinued}>CONTINUE</Button>\n        </Aux>\n    );\n}\n\nexport default orderSummary;\n","import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","import React, { Component } from 'react';\n\nimport Modal from '../../components/UI/Modal/Modal';\nimport Aux from '../Auxiliary/Auxiliary';\n\nconst withErrorHandler = ( WrappedComponent, axios ) => {\n    return class extends Component {\n        state = {\n            error: null,\n        }\n\n        UNSAFE_componentWillMount() {\n            this.reqInterceptor = axios.interceptors.request.use(req => {\n                this.setState({error: null});\n                return req;\n            });\n            this.resInterceptor = axios.interceptors.response.use(res => res, error => {\n                this.setState({error: error});\n            });\n        }\n\n        componentWillUnmount() {\n            axios.interceptors.request.eject(this.reqInterceptor);\n            axios.interceptors.response.eject(this.resInterceptor);\n        }\n\n        errorConfirmedHandler = () => {\n            this.setState({error: null});\n        }\n\n        render () {\n            return (\n                <Aux>\n                    <Modal \n                        show={this.state.error}\n                        modalClosed={this.errorConfirmedHandler}>\n                        {this.state.error ? this.state.error.message : null}\n                    </Modal>\n                    <WrappedComponent {...this.props} />\n                </Aux>\n            );\n        }\n    }\n}\n\nexport default withErrorHandler;","import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\n\nconst FIREBASE_API_TOKEN = 'AIzaSyD_yzOfZNril23UYfoTG2-4FfVQJK_ZhBY';\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    console.log(error)\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const authStart = () => {\n    return { \n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeout = (exporationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, exporationTime * 1000);\n    };\n};\n\nexport const auth = (email, password, isSignup) => {\n    return dispatch => {\n        dispatch(authStart());\n        \n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        }\n\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + FIREBASE_API_TOKEN;\n        if (!isSignup) {\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + FIREBASE_API_TOKEN;\n        }\n\n        axios.post(url, authData)\n            .then(response => {\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n                localStorage.setItem('token', response.data.idToken);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('userId', response.data.localId);\n                dispatch(authSuccess(response.data.idToken, response.data.localId));\n                dispatch(checkAuthTimeout(response.data.expiresIn));\n            })\n            .catch(error => {\n                dispatch(authFail(error.response.data.error));\n            });\n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem('userId');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n            }\n        }\n    };\n};\n","export const ADD_INGREDIENT = 'ADD_INGREDIENT';\nexport const REMOVE_INGREDIENT = 'REMOVE_INGREDIENT';\nexport const SET_INGREDIENTS = 'SET_INGREDIENTS';\nexport const FETCH_INGREDIENTS_FAILED = 'FETCH_INGREDIENTS_FAILED';\n\nexport const PURCHASE_BURGER_START = 'PURCHASE_BURGER_START';\nexport const PURCHASE_BURGER_SUCCESS = 'PURCHASE_BURGER_SUCCESS';\nexport const PURCHASE_BURGER_FAIL = 'PURCHASE_BURGER_FAIL';\nexport const PURCHASE_BURGER_INIT = 'PURCHASE_INIT';\n\nexport const FETCH_ORDERS_START = 'FETCH_ORDERS_START';\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\nexport const FETCH_ORDERS_FAIL = 'FETCH_ORDERS_FAIL';\n\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\n\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';\n","import React, {Component} from 'react';\nimport axios from '../../axios-orders';\nimport {connect} from 'react-redux';\n\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\n\nclass BurgerBuilder extends Component {\n    state = {\n        purchasing: false\n    }\n\n    componentDidMount() {\n        this.props.onInitIngredients();\n    }\n\n    isPurchasable = () => {\n        const ingredients = this.props.ings;\n        const sum = Object.keys(ingredients)\n            .map(igkey => {\n                return ingredients[igkey];\n            })\n            .reduce((sum, el) => {\n                return sum + el;\n            }, 0);\n\n        return sum > 0;\n    }\n\n    purchaseHandler = () => {\n        if (this.props.isAuthenticated) {\n            this.setState({purchasing: true});\n        } else {\n            this.props.onSetAuthRedirectPath('/checkout');\n            this.props.history.push('/auth');\n        }\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false});\n    }\n\n    purchaseContinuedHandler = () => {\n        this.props.onInitPurchase();\n        this.props.history.push('/checkout');\n    }\n\n    render() {\n        const disableInfo = {\n            ...this.props.ings\n        }\n        for (let key in disableInfo) {\n            disableInfo[key] = disableInfo[key] <= 0;\n        }\n        let orderSummary = null;\n        let burger = this.props.error ? <p style={{textAlign: 'center'}}>Ingredients can't be loaded!</p> : <Spinner />;\n        if (this.props.ings) {\n            burger = (\n                <Aux>\n                    <Burger ingredients={this.props.ings} />\n                    <BuildControls \n                        ingredientAdded={this.props.onIngredientAdded} \n                        ingredientRemoved={this.props.onIngredientRemoved} \n                        disabled={disableInfo}\n                        price={this.props.price}\n                        purchasable={this.isPurchasable()} \n                        ordered={this.purchaseHandler}\n                        isAuth={this.props.isAuthenticated}\n                    />\n                </Aux>\n            );\n\n            orderSummary = <OrderSummary \n                                ingredients={this.props.ings} \n                                purchaseCancelled={this.purchaseCancelHandler}\n                                purchaseContinued={this.purchaseContinuedHandler}\n                                price={this.props.price}\n                            />;\n        }\n        return (\n            <Aux>\n                <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </Aux>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        error: state.burgerBuilder.error,\n        isAuthenticated: state.auth.token !== null\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIngredientAdded: (ingName) => dispatch(actions.addIngredient(ingName)),\n        onIngredientRemoved: (ingName) => dispatch(actions.removeIngredient(ingName)),\n        onInitIngredients: () => dispatch(actions.initIngredients()),\n        onInitPurchase: () =>  dispatch(actions.purchaseBurgerInit()),\n        onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));\n","import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\n\nexport const addIngredient = (name) => {\n    return {\n        type: actionTypes.ADD_INGREDIENT,\n        ingredientName: name\n    };\n};\n\nexport const removeIngredient = (name) => {\n    return {\n        type: actionTypes.REMOVE_INGREDIENT,\n        ingredientName: name\n    };\n};\n\nexport const setIngredients = (ingredients) => {\n    return {\n        type: actionTypes.SET_INGREDIENTS,\n        ingredients: ingredients\n    };\n};\n\nexport const fetchIngredientsFailed = () => {\n    return {\n        type: actionTypes.FETCH_INGREDIENTS_FAILED,\n    };\n};\n\nexport const initIngredients = () => {\n    return dispatch => {\n        axios.get('/ingredients.json')\n            .then(response => {\n                dispatch(setIngredients(response.data));\n            })\n            .catch(error => {\n                dispatch(fetchIngredientsFailed());\n            });\n    };\n};\n","import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\n        orderId: id,\n        orderData: orderData\n    };\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_FAIL,\n        error: error\n    };\n};\n\nexport const purchaseBurgerStart = () => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_START\n    };\n};\n\nexport const purchaseBurger = (orderData, token) => {\n    return dispatch => {\n        dispatch(purchaseBurgerStart());\n        axios.post('/orders.json?auth=' + token, orderData)\n            .then(response => {\n                dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n            })\n            .catch(error => {\n                dispatch(purchaseBurgerFail(error));\n            });\n    };\n};\n\nexport const purchaseBurgerInit = () => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_INIT\n    };\n};\n\nexport const fetchOrdersSuccess = (orders) => {\n    return {\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\n        orders: orders\n    };\n};\n\nexport const fetchOrdersFail = (error) => {\n    return {\n        type: actionTypes.FETCH_ORDERS_FAIL,\n        error: error\n    };\n};\n\nexport const fetchOrdersStart = () => {\n    return {\n        type: actionTypes.FETCH_ORDERS_START\n    };\n};\n\nexport const fetchOrders = (token, userId) => {\n    return dispatch => {\n        dispatch(fetchOrdersStart());\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n        axios.get('/orders.json' + queryParams)\n            .then(res => {\n                const fetchedOrders = [];\n                for (let key in res.data) {\n                    fetchedOrders.push({\n                        id: key,\n                        ...res.data[key]\n                    });\n                }\n                dispatch(fetchOrdersSuccess(fetchedOrders));\n            })\n            .catch(err => {\n                dispatch(fetchOrdersFail(err));\n            });\n    };\n};\n","import React from 'react';\n\nimport classes from './CheckoutSummary.module.css';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it taste well!</h1>\n            <div style={{width: '100%', margin: 'auto', display: 'flex'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;\n","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    let validationError = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n        validationError = <p>Please enter a valid {props.valueType}!</p>;\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            break;\n        case ('select'):\n                inputElement = <select \n                                    className={inputClasses.join(' ')}\n                                    value={props.value}\n                                    onChange={props.changed}\n                                >\n                                    {props.elementConfig.options.map(option => (\n                                        <option key={option.value} value={option.value}>\n                                            {option.displayValue}\n                                        </option>\n                                    ))}\n                                </select>;\n                break;\n        default:\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n    }\n\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n}\n\nexport default input;\n","import React, {Component} from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport {connect} from 'react-redux';\nimport axios from '../../../axios-orders';\n\nimport classes from './ContactData.module.css';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/order';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Zip Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            },\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid\n        });\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType} \n                        elementConfig={formElement.config.elementConfig} \n                        value={formElement.config.value}\n                        valueType={formElement.config.elementConfig.placeholder}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                    />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(withRouter(ContactData), axios));\n","import React, {Component} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CheckoutSmmary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />\n        \n        if (this.props.ings && !this.props.purchased) {\n            summary = (\n                <div>\n                    <CheckoutSmmary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} \n                    />\n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                        component={ContactData} \n                    />\n                </div>\n            );\n        }\n\n        return summary;\n    }\n}\n\nconst mapStateToProps =  state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from 'react';\n\nimport classes from './Order.module.css';\n\nconst order = (props) => {\n    const ingredients = [];\n\n    for (let ingredientName in props.ingredients) {\n        ingredients.push({\n            name: ingredientName,\n            amount: props.ingredients[ingredientName]\n        });\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n        return <span \n                    style={{\n                        textTransform: 'capitalize',\n                        display: 'inline-block',\n                        margin: '0 8px',\n                        border: '1px solid #ccc',\n                        padding: '5px'\n                    }}\n                    key={ig.name}\n                >\n                    {ig.name} ({ig.amount})\n                </span>;\n    });\n\n    return(\n        <div className={classes.Order}>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: <strong>{Number.parseFloat(props.price).toFixed(2)}€</strong></p>\n        </div>\n    );\n};\n\nexport default order;","import React, {Component} from 'react';\nimport axios from '../../axios-orders';\nimport {connect} from 'react-redux';\n\nimport Order from '../../components/Order/Order';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token, this.props.userId);\n    }\n\n    render() {\n        let orders = <Spinner />;\n\n        if (!this.props.loading) {\n            orders = (\n                <div>\n                    {this.props.orders.map(order => (\n                        <Order \n                            key={order.id}\n                            ingredients={order.ingredients}\n                            price={order.price}\n                        />\n                    ))}\n                </div>\n            );\n        }\n\n        return orders;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport classes from './Auth.module.css';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/auth';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        });\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType} \n                elementConfig={formElement.config.elementConfig} \n                value={formElement.config.value}\n                valueType={formElement.config.elementConfig.placeholder}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = <p>{this.props.error.message}</p>;\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />;\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath,\n        buildingBurger: state.burgerBuilder.building\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport * as actions from '../../../store/actions/auth';\n\nclass Logout extends Component {\n    componentDidMount() {\n        this.props.onLogout();\n    }\n\n    render() {\n        return <Redirect to=\"/\" />;\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Logout);","import React, {Component} from 'react';\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport Layout from './hoc/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\nimport Checkout from './containers/Checkout/Checkout';\nimport Orders from './containers/Orders/Orders';\nimport Auth from './containers/Auth/Auth';\nimport Logout from './containers/Auth/Logout/Logout';\nimport * as actions from './store/actions/auth';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onTryAutoSignup();\n  }\n\n  render() {\n    let routes = (\n      <Switch>\n        <Route path=\"/auth\" component={Auth} />\n        <Route path=\"/\" exact component={BurgerBuilder} />\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n\n    if (this.props.isAuthenticated) {\n      routes = (\n        <Switch>\n          <Route path=\"/checkout\" component={Checkout} />\n          <Route path=\"/orders\" component={Orders} />\n          <Route path=\"/logout\" component={Logout} />\n          <Route path=\"/auth\" component={Auth} />\n          <Route path=\"/\" exact component={BurgerBuilder} />\n          <Redirect to=\"/\" />\n        </Switch>\n      );\n    }\n\n    return (\n      <div>\n        <Layout>\n          {routes}\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onTryAutoSignup: () => dispatch(actions.authCheckState())\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    bacon: 0.7,\n    meat: 1.3\n}\n\nconst BASE_PRICE = 4;\n\nconst initialState = {\n    ingredients: null,\n    totalPrice: BASE_PRICE,\n    error: false,\n    building: false\n};\n\nconst reducer = (state = initialState, action) => {\n    let updatedState = JSON.parse(JSON.stringify(state));\n\n    switch ( action.type ) {\n        case actionTypes.ADD_INGREDIENT:\n            updatedState = addIngredient(state, action, updatedState);\n            break;\n        case actionTypes.REMOVE_INGREDIENT:\n            updatedState = removeIngredient(state, action, updatedState);\n            break;\n        case actionTypes.SET_INGREDIENTS:\n            updatedState = setIngredient(state, action, updatedState);\n            break;\n        case actionTypes.FETCH_INGREDIENTS_FAILED:\n            updatedState = fetchIngredientFail(state, action, updatedState);\n            break;\n        default:\n            console.log(\"[BurgerBuilder Reducer] Action default case\");\n            break;\n    }\n\n    return updatedState;\n};\n\nexport default reducer;\n\n// Auxiliary Functions\nconst addIngredient = (state, action, updatedState) => {\n    updatedState.ingredients[action.ingredientName] =  state.ingredients[action.ingredientName] + 1;\n    updatedState.totalPrice = state.totalPrice + INGREDIENT_PRICES[action.ingredientName];\n    updatedState.building = true;\n    return updatedState;\n}\n\nconst removeIngredient = (state, action, updatedState) => {\n    updatedState.ingredients[action.ingredientName] =  state.ingredients[action.ingredientName] - 1;\n    updatedState.totalPrice = state.totalPrice - INGREDIENT_PRICES[action.ingredientName];\n    updatedState.building = true;\n    return updatedState;\n}\n\nconst setIngredient = (state, action, updatedState) => {\n    let price = BASE_PRICE;\n    for (let ingredient in action.ingredients) {\n        price += INGREDIENT_PRICES[ingredient] * action.ingredients[ingredient];\n    }\n    updatedState.ingredients = {\n        salad: action.ingredients.salad,\n        cheese: action.ingredients.cheese,\n        bacon: action.ingredients.bacon,\n        meat: action.ingredients.meat\n    };\n    updatedState.totalPrice = price;\n    updatedState.error = false;\n    updatedState.building = false;\n    return updatedState;\n}\n\nconst fetchIngredientFail = (state, action, updatedState) => {\n    updatedState.error = true;\n    return updatedState;\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    orders: [],\n    loading: false,\n    purchased: false\n}\n\nconst reducer = (state = initialState, action) => {\n    let updatedState = JSON.parse(JSON.stringify(state));\n\n    switch ( action.type ) {\n        case actionTypes.PURCHASE_BURGER_INIT:\n            updatedState = purchaseBurgerInit(state, action, updatedState);\n            break;\n        case actionTypes.PURCHASE_BURGER_START:\n            updatedState = purchaseBurgerStart(state, action, updatedState);\n            break;\n        case actionTypes.PURCHASE_BURGER_SUCCESS:\n            updatedState = purchaseBurgerSuccess(state, action, updatedState);\n            break;\n        case actionTypes.PURCHASE_BURGER_FAIL:\n            updatedState = purchaseBurgerFail(state, action, updatedState);\n            break;\n        case actionTypes.FETCH_ORDERS_START:\n            updatedState = fetchOrdersStart(state, action, updatedState);\n            break;\n        case actionTypes.FETCH_ORDERS_SUCCESS:\n            updatedState = fetchOrdersSuccess(state, action, updatedState);\n            break;\n        case actionTypes.FETCH_ORDERS_FAIL:\n            updatedState = fetchOrdersFail(state, action, updatedState);\n            break;\n        default:\n            console.log(\"[Order Reducer] Action default case\");\n            break;\n    }\n\n    return updatedState;\n};\n\nexport default reducer;\n\n// Auxiliary Functions\nconst purchaseBurgerInit = (state, action, updatedState) => {\n    updatedState.purchased = false;\n    return updatedState;\n}\n\nconst purchaseBurgerStart = (state, action, updatedState) => {\n    updatedState.loading = true;\n    return updatedState;\n}\n\nconst purchaseBurgerSuccess = (state, action, updatedState) => {\n    const newOrder = {\n        id: action.orderId,\n        ...action.orderData\n    };\n    updatedState.loading = false;\n    updatedState.purchased = true;\n    updatedState.orders = state.orders.concat(newOrder);\n    return updatedState;\n}\n\nconst purchaseBurgerFail = (state, action, updatedState) => {\n    updatedState.loading = false;\n    return updatedState;\n}\n\nconst fetchOrdersStart = (state, action, updatedState) => {\n    updatedState.loading = true;\n    return updatedState;\n}\n\nconst fetchOrdersSuccess = (state, action, updatedState) => {\n    updatedState.loading = false;\n    updatedState.orders = action.orders;\n    return updatedState;\n}\n\nconst fetchOrdersFail = (state, action, updatedState) => {\n    updatedState.loading = false;\n    return updatedState;\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    loading: false,\n    authRedirectPath: '/'\n};\n\nconst reducer = (state = initialState, action) => {\n    let updatedState = JSON.parse(JSON.stringify(state));\n\n    switch ( action.type ) {\n        case actionTypes.AUTH_START:\n            updatedState = authStart(state, action, updatedState);\n            break;\n        case actionTypes.AUTH_SUCCESS:\n            updatedState = authSuccess(state, action, updatedState);\n            break;\n        case actionTypes.AUTH_FAIL:\n            updatedState = authFail(state, action, updatedState);\n            break;\n        case actionTypes.AUTH_LOGOUT:\n            updatedState = authLogout(state, action, updatedState);\n            break;\n        case actionTypes.SET_AUTH_REDIRECT_PATH:\n            updatedState = setAuthRedirectPath(state, action, updatedState);\n            break;\n        default:\n            console.log(\"[Auth Reducer] Action default case\");\n            break;\n    }\n\n    return updatedState;\n};\n\nexport default reducer;\n\n// Auxiliary Functions\nconst authStart = (state, action, updatedState) => {\n    updatedState.error = null;\n    updatedState.loading = true;\n    return updatedState;\n}\n\nconst authSuccess = (state, action, updatedState) => {\n    updatedState.token = action.idToken;\n    updatedState.userId = action.userId;\n    updatedState.error = null;\n    updatedState.loading = false;\n    return updatedState;\n}\n\nconst authFail = (state, action, updatedState) => {\n    updatedState.error = action.error;\n    updatedState.loading = false;\n    return updatedState;\n}\n\nconst authLogout = (state, action, updatedState) => {\n    updatedState.token = null;\n    updatedState.userId = null;\n    return updatedState;\n}\n\nconst setAuthRedirectPath = (state, action, updatedState) => {\n    updatedState.authRedirectPath = action.path;\n    return updatedState;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport burgerBuilderReducer from './store/reducers/burgerBuilder';\nimport orderReducer from './store/reducers/order';\nimport authReducer from './store/reducers/auth';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n    burgerBuilder: burgerBuilderReducer,\n    order: orderReducer,\n    auth: authReducer\n});\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename='/burguer-builder/'>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}