{"version":3,"sources":["shared/utility.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","validation","valid","touched","password","isSignup","inputChangedHandler","event","controlName","updatedControls","JSON","parse","stringify","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","valueType","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","validationError","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.0630b9c2.chunk.js","sourcesContent":["export const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    return isValid;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport classes from './Auth.module.css';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/auth';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {checkValidity} from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = JSON.parse(JSON.stringify(this.state.controls));\n        updatedControls[controlName].value = event.target.value;\n        updatedControls[controlName].valid = checkValidity(event.target.value, this.state.controls[controlName].validation);\n        updatedControls[controlName].touched = true;\n\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        });\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType} \n                elementConfig={formElement.config.elementConfig} \n                value={formElement.config.value}\n                valueType={formElement.config.elementConfig.placeholder}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = <p>{this.props.error.message}</p>;\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />;\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath,\n        buildingBurger: state.burgerBuilder.building\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    let validationError = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n        validationError = <p>Please enter a valid {props.valueType}!</p>;\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            break;\n        case ('select'):\n                inputElement = <select \n                                    className={inputClasses.join(' ')}\n                                    value={props.value}\n                                    onChange={props.changed}\n                                >\n                                    {props.elementConfig.options.map(option => (\n                                        <option key={option.value} value={option.value}>\n                                            {option.displayValue}\n                                        </option>\n                                    ))}\n                                </select>;\n                break;\n        default:\n            inputElement = <input \n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} \n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n    }\n\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n}\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}